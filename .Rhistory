add_lines(y = df$X3, color = I("blue"), name = wList[3]) %>%
add_lines(y = df$X4, color = I("black"), name = wList[4]) %>%
add_lines(y = df$X5, color = I("purple"), name = wList[5])%>%
add_lines(y = df$X6, color = I("yellow"), name = wList[6])%>%
add_lines(y = df$X7, color = I("orange"), name = wList[7])
x  <- 1:dmgInc
plot_ly(x = x) %>%
add_lines(y = df$X8, color = I("red"), name = wList[8]) %>%
add_lines(y = df$X9, color = I("green"), name = wList[9]) %>%
add_lines(y = df$X10, color = I("blue"), name = wList[10])%>%
add_lines(y = df$X11, color = I("black"), name = wList[11]) %>%
add_lines(y = df$X12, color = I("purple"), name = wList[12]) %>%
add_lines(y = df$X13, color = I("yellow"), name = wList[13])
plot_ly(x = x) %>%
add_lines(y = df$X1, color = I("red"), name = wList[1]) %>%
add_lines(y = df$X2, color = I("green"), name = wList[2])%>%
add_lines(y = df$X3, color = I("blue"), name = wList[3]) %>%
add_lines(y = df$X4, color = I("black"), name = wList[4]) %>%
add_lines(y = df$X5, color = I("purple"), name = wList[5])%>%
add_lines(y = df$X6, color = I("yellow"), name = wList[6])%>%
add_lines(y = df$X7, color = I("orange"), name = wList[7])
library(plotly)
library(networkD3)
library(dplyr)
install.packages('networkD3')
install.packages('dplyr')
install.packages("dplyr")
library(networkD3)
library(dplyr)
links <- data.frame(
source=c("group_A","group_A", "group_B", "group_C", "group_C", "group_E"),
target=c("group_C","group_D", "group_E", "group_F", "group_G", "group_H"),
value=c(2,3, 2, 3, 1, 3)
)
library(networkD3)
library(dplyr)
# A connection data frame is a list of flows with intensity for each flow
links <- data.frame(
source=c("group_A","group_A", "group_B", "group_C", "group_C", "group_E"),
target=c("group_C","group_D", "group_E", "group_F", "group_G", "group_H"),
value=c(2,3, 2, 3, 1, 3)
)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
print(p)
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
print(p)
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
print(p)
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
sankeyNetwork
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
nod<-unique(c(links$source,links$target))
nod
substring(nod, 1, 1)
substring(nod, 1, 3)
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
print(p)
source('~/PVSignal/covid_proteins_semi_cleaned/sank.R')
2.71+11.94+36-0.05+0.11*1.78+0.32*70-0.23*80
sessionInfo()
library(shiny)
library(shinyjs)
# library(tidyverse)
library(dplyr)
library(readxl)
library(networkD3)
library(circlize)
library(shinydashboard)
library(googleVis)
library(heatmaply)
library(shinyHeatmaply)
library(RColorBrewer)
# library(VennDiagram)
sessionInfo()
shiny::runApp('C:/Users/achytas/ownCloud/shinyapp')
shiny::runApp('C:/Users/achytas/ownCloud/shinyapp')
source('C:/Users/achytas/ownCloud/prescit/r converter/sql2owl.R')
Î¹
i
source('C:/Users/achytas/ownCloud/prescit/r converter/sql2owl.R')
source('C:/Users/achytas/ownCloud/prescit/r converter/sql2owl.R')
i
i
ttlInit
source('C:/Users/achytas/ownCloud/prescit/r converter/sql2owl.R')
b<-as.data.frame(iris)
gsub(b[1,1],"adfa")
b
gsub
gsub("virgin","test",b[,5])
gsub("versi","another",b[,5])
lapply(b,2,function(x) mean(x))
apply(b,2,function(x) mean(x))
apply(b,1,function(x) mean(x))
apply(b[,1:4],1,function(x) mean(x))
apply(b[1:4],1, function(x) median(X))
apply(b[1:4],1, function(x) median(x))
for (i in 1:ncol(b)){
if (b[,i]=="virginia"){
print(b[1:4,i])
}
}
i
for (i in 1:nrow(b)){
if (b[,i]=="virginia"){
print(b[1:4,i])
}
}
i
b
for (i in 1:nrow(b)){
if (b[,i]=="virginica"){
print(b[1:4,i])
}
}
for (i in 1:nrow(b)){
if (b[i,6]=="virginica"){
print(b[1:4,i])
}
}
i
for (i in 1:nrow(b)){
if (b[i,5]=="virginica"){
print(b[1:4,i])
}
}
for (i in 1:nrow(b)){
if (b[i,5]=="virginica"){
print(b[i,1:4])
}
}
for (j in 1:nrow(b)){
if (b[i,5]=="virginica"){
print(b[i,1:4])
}
}
setwd("C:/Users/achytas/ownCloud/shinyapp")
shiny::runApp()
shiny::runApp()
a<-"ax*t"
grep
str_detect
grep("b",a)
grep("a",a)
(grep("a",a)+grep("c")+grep("g")+grep("t"))/length(a)
(grep("a",a)+grep("c",a)+grep("g",a)+grep("t",a))/length(a)
(grep("a",a)+grep("c",a)+grep("g",a)+grep("t",a))
grep("a",a)+grep("c",a)+grep("g",a)+grep("t",a)
grep("c",a)
grep("g",a)
grep("t",a)
grep("a",a)
b<-"aatg"
grep("a",b)
nchar("a",a)+nchar("c",a)+nchar("g",a)+nchar("t",a)
str_count("a",a)+str_count("c",a)+str_count("g",a)+str_count("t",a)
library(stringr)
str_count("a",a)+str_count("c",a)+str_count("g",a)+str_count("t",a)
str_count(a,"a")+str_count("c",a)+str_count("g",a)+str_count("t",a)
(str_count(a,"a")+str_count(a,"c")+str_count(a,"g")+str_count(a,"t"))/length(a)
(str_count(a,"a")+str_count(a,"c")+str_count(a,"g")+str_count(a,"t"))/nchar(a)
b<-c("acgt","xxat","at","dapg")
((str_count(a,"a")+str_count(a,"c")+str_count(a,"g")+str_count(a,"t"))/nchar(a))<1
a<-b
a[((str_count(a,"a")+str_count(a,"c")+str_count(a,"g")+str_count(a,"t"))/nchar(a))<1]
nchar(a)-(str_count(a,"a")+str_count(a,"c")+str_count(a,"g")+str_count(a,"t")
)
a
a<-c("acgt","xxat","at","dapg")
#queue abilities
#cast blood strike
bs<-function(offFlag=F){
dmgMult=0.4
extraDmgMult=1+0.125*boss@disP+0.125*boss@disF+bNorthMod
extraBaseDmg=306
extraCrit<-0
totalCrit<-crit+extraCrit
critMult<-2.45
if (offFlag)
dmg<-meleeHit(bHit,totalCrit,critMult=critMult,dmgMult=dmgMult,extraDmgMult=extraDmgMult,
extraBaseDmg=extraBaseDmg,type="Blood Strike",weapon=ofh)
else
dmg<-meleeHit(bHit,totalCrit,critMult=critMult,dmgMult=dmgMult,extraDmgMult=extraDmgMult,
extraBaseDmg=extraBaseDmg,type="Blood Strike")
#apply dmg reduction
dmg<-dmg*(1-bossDMGRed)
#cost runes only for the mainhand attack
if (!offFlag)
if (dmg>0){
#cost 1 blood
if (blood@cd1==0){
blood@cd1<<-10
}else
blood@cd2<<-10
}
bsDmg<<-bsDmg+dmg
if (!offFlag){
globalCDTime<<-globalCD+globalCDTime
if (dmg>0)
runicPower<<-min(130,(runicPower+10))
}
}
#cast obliterate
obl<-function(offFlag=F){
dmgMult=0.8
extraDmgMult<-1+0.125*boss@disP+0.125*boss@disF
extraBaseDmg<-467
extraCrit<-0.15
critMult<-2.45
totalCrit<-crit+extraCrit
if (offFlag)
dmg<-meleeHit(bHit,totalCrit,critMult=critMult,dmgMult=dmgMult,extraDmgMult=extraDmgMult,
extraBaseDmg=extraBaseDmg,type="Obliterate",weapon=ofh)
else
dmg<-meleeHit(bHit,totalCrit,critMult=critMult,dmgMult=dmgMult,extraDmgMult=extraDmgMult,
extraBaseDmg=extraBaseDmg,type="Obliterate")
#apply dmg reduction
dmg<-dmg*(1-bossDMGRed)
#cost runes only for the mainhand attack
if (!offFlag)
if (dmg>0){
#cost 1 frost + 1 unholy
if (frost@cd1==0){
frost@cd1<<-10
}else
frost@cd2<<-10
#cost 1 frost + 1 unholy
if (unholy@cd1==0){
unholy@cd1<<-10
}else
unholy@cd2<<-10
}
oblDmg<<-oblDmg+dmg
if (!offFlag){
globalCDTime<<-globalCD+globalCDTime
if (dmg>0)
runicPower<<-min(130,(runicPower+15))
}
}
#cast icy touch  // adds disease 1
ict<-function(){
extraDmgMult=1+blackIceMod+glacierRotMod
extraCrit<-0
totalCrit<-crit+extraCrit
critMult<-2.3
dmg<-spellHit(sHit,totalCrit,critMult=2,extraDmgMult=extraDmgMult,spell=icyTouch)
#cost 1 frost
if (frost@cd1==0){
frost@cd1<<-10
}else
frost@cd2<<-10
boss@disF<<-T
boss@durF<<-15
print("Is afflicted with Icy Touch")
ictDmg<<-ictDmg+dmg
globalCDTime<<-globalCD+globalCDTime
runicPower<<-min(130,(runicPower+15))
}
#cast blast
hBlast<-function(){
extraDmgMult=1+blackIceMod+glacierRotMod
extraCrit<-0
totalCrit<-crit+extraCrit
critMult<-2.45
hit<-0.85
dmg<-spellHit(sHit,totalCrit,critMult=critMult,spell=howlBlast)
#cost 1 frost + 1 unholy
if (frost@cd1==0){
frost@cd1<<-10
}else
frost@cd2<<-10
#cost 1 frost + 1 unholy
if (unholy@cd1==0){
unholy@cd1<<-10
}else
unholy@cd2<<-10
blastDmg<<-blastDmg+dmg
globalCDTime<<-globalCD+globalCDTime
runicPower<<-min(130,(runicPower+15))
}
#cast plague strike  // adds disease 2
ps<-function(offFlag=F){
dmgMult=0.5
extraDmgMult=1+0.125*boss@disP+0.125*boss@disF
extraCrit<-0.06
extraBaseDmg=189
totalCrit<-crit+extraCrit
critMult<-2.3
if (offFlag)
dmg<-meleeHit(bHit,totalCrit,critMult,dmgMult=dmgMult,extraDmgMult=extraDmgMult,
extraBaseDmg=extraBaseDmg,type="Plague Strike",weapon=ofh)
else
dmg<-meleeHit(bHit,totalCrit,critMult,dmgMult=dmgMult,extraDmgMult=extraDmgMult,
extraBaseDmg=extraBaseDmg,type="Plague Strike")
#apply dmg reduction
dmg<-dmg*(1-bossDMGRed)
#cost runes only for the mainhand attack
if (!offFlag)
if (dmg>0){
#cost 1 unholy
if (unholy@cd1==0){
unholy@cd1<<-10
}else
unholy@cd2<<-10
boss@disP<<-T
boss@durP<<-15
print("Is afflicted with Plague")
}
psDmg<<-psDmg+dmg
if (!offFlag){
globalCDTime<<-globalCD+globalCDTime
if (dmg>0)
runicPower<<-min(130,(runicPower+15))
}
}
#cast pestilence // refreshes diseases
pest<-function(){
#cost runes only for the mainhand attack
#cost 1 blood
if (blood@cd1==0){
blood@cd1<<-10
}else
blood@cd2<<-10
if (runif(1,0,1)>=sHit){
boss@disP<<-T
boss@durP<<-15
boss@disF<<-T
boss@durF<<-15
print("Diseases refreshed")
}
else
print("Pestilence resisted")
}
#cast frost strike
fss<-function(offFlag=F){
dmgMult=0.55
extraDmgMult=1+blackIceMod+glacierRotMod+bNorthMod
extraBaseDmg<-138
extraCrit<-0
critMult<-2.45
if (offFlag)
dmg<-meleeHit(bHit,(crit+extraCrit),critMult=critMult,dmgMult=dmgMult,extraDmgMult=extraDmgMult,
extraBaseDmg=extraBaseDmg,type="Frost Strike",weapon=ofh)
else
dmg<-meleeHit(bHit,(crit+extraCrit),critMult=critMult,dmgMult=dmgMult,extraDmgMult=extraDmgMult,
extraBaseDmg=extraBaseDmg,type="Frost Strike")
fssDmg<<-fssDmg+dmg
if (!offFlag){
globalCDTime<<-globalCD+globalCDTime
runicPower<<-max(0,(runicPower-32))
}
}
#cast melee
meleeHit<-function(hit,crit,critMult=2,dmgMult=1,extraDmgMult=1,extraBaseDmg=0,type=NULL,weapon=mh){
dmg<-0
if (runif(1,0,1)>bossDodge){
if (runif(1,0,1)<hit){
if (runif(1,0,1)<=crit){
dmg<-floor(critMult*extraDmgMult*weapon@dmgMult*(dmgMult*rollWDmg(weapon)+extraBaseDmg+weapon@speed*bAP/14))
if (!is.null(type))
print(paste0(floor(ctime),":",type," crits for ",dmg))
else
print(paste0(floor(ctime),":",weapon@name," crits for ",dmg))
totalDmg<<-totalDmg+dmg
}else{
dmg<-floor(extraDmgMult*weapon@dmgMult*(dmgMult*rollWDmg(weapon)+extraBaseDmg+extraBaseDmg+weapon@speed*bAP/14))
if (!is.null(type))
print(paste0(floor(ctime),":",type," hits for ",dmg))
else
print(paste0(floor(ctime),":",weapon@name," hits for ",dmg))
totalDmg<<-totalDmg+dmg
}
}else{
if (!is.null(type))
print(paste0(floor(ctime),":",type," misses"))
else
print(paste0(floor(ctime),":",weapon@name," misses"))
}
}else{
if (!is.null(type))
print(paste0(floor(ctime),":",type," is dodged"))
else
print(paste0(floor(ctime),":",weapon@name," is dodged"))
}
return(dmg)
}
#cast spell
spellHit<-function(hit,crit,critMult=2,dmgMult=1,extraDmgMult=1,extraBaseDmg=0,spell){
dmg<-0
if (runif(1,0,1)<hit){
if (runif(1,0,1)<=crit){
dmg<-floor(critMult*extraDmgMult*(dmgMult*rollWDmg(spell)+extraBaseDmg))
print(paste0(floor(ctime),":",spell@name," crits for ",dmg))
totalDmg<<-totalDmg+dmg
}else{
dmg<-floor(extraDmgMult*(dmgMult*rollWDmg(spell)+extraBaseDmg))
print(paste0(floor(ctime),":",spell@name," hits for ",dmg))
totalDmg<<-totalDmg+dmg
}
}else{
print(paste0(floor(ctime),":",spell@name," misses"))
}
return(dmg)
}
reduceTimers<-function()
{
blood@cd1<<-max(0,blood@cd1-timeStep)
blood@cd2<<-max(0,blood@cd2-timeStep)
frost@cd1<<-max(0,frost@cd1-timeStep)
frost@cd2<<-max(0,frost@cd2-timeStep)
unholy@cd1<<-max(0,unholy@cd1-timeStep)
unholy@cd2<<-max(0,unholy@cd2-timeStep)
weaponSwingCD<<-weaponSwingCD-timeStep
weaponSwingOffCD<<-weaponSwingOffCD-timeStep
boss@durP<<-max(0,boss@durP-timeStep)
if (boss@durP==0){
boss@disP<<-F
}else if ((boss@durP<15)&(boss@durP%%3<=timeStep)){
#todo write proper tick damage for disease
dmg<-300
plDmg<<-plDmg+dmg
totalDmg<<-totalDmg+dmg
}
boss@durF<<-max(0,boss@durF-timeStep)
if (boss@durF==0){
boss@disF<<-F
}else if ((boss@durF<15)&(boss@durF%%3<=timeStep)){
#todo write proper tick damage for disease
dmg<-300
ictDmg<<-ictDmg+dmg
totalDmg<<-totalDmg+dmg
}
ctime<<-ctime+timeStep
}
rollWDmg<-function(weap,mult=1){
mult*(weap@lowDmg+runif(1,0,1)*(weap@highDmg-weap@lowDmg))
}
necrosis<-function(dmg){
#add damage as shadow dmg
tempDmg<-(dmg*0.2)*(1+blackIceMod)
ncDmg<<-ncDmg+tempDmg
tempDmg
}
cake<-function(dmg){
#add weapon dmg based on proc 30%
if (dmg==0) return(0)
cakeDmg<-0
if (runif(1,0,1)<=0.3)
cakeDmg<-(0.25+0.125*boss@disP+0.125*boss@disF)*dmg
#apply dmg reduction
cakeDmg<-cakeDmg*(1-bossDMGRed)
ckDmg<<-ckDmg+cakeDmg
cakeDmg
}
autoAttack<-function(offFlag=F){
if (dualWieldF)
bHit<-bHit-dwHitpenalty
cakeDmg=necDmg=0
if (offFlag)
autoDmg<-meleeHit(bHit,crit,weapon=ofh)
else
autoDmg<-meleeHit(bHit,crit)
if (necroFlag)
necDmg<-necrosis(autoDmg)
if (cakeFlag)
cakeDmg<-cake(autoDmg)
#apply dmg reduction
autoDmg<-autoDmg*(1-bossDMGRed)
whiteDmg<<-whiteDmg+autoDmg+cakeDmg+necDmg
if (offFlag)
weaponSwingOffCD<<-weaponSwingOff
else
weaponSwingCD<<-weaponSwing
}
source("~/personal/wotkl_dk_sim.R")
setClass("test", slots=list(name="character", cd1="numeric",cost="function"))
derp<-function(){
cd1+3
}
oo<-new("test",name="bb",cd1=3,cost=derp)
oo@cost()
derp<-function(a){
a@cd1+3
}
oo@cost(oo)
oo<-new("test",name="bb",cd1=3,cost=derp)
oo@cost(oo)
shiny::runApp()
setwd("~/GitHub/kg_sp_slr_charts")
setwd("~/GitHub/kg_sp_slr_charts")
